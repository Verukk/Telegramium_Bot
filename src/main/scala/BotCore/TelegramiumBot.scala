package BotCore

import BotCore.DndApiClient._
import cats.Parallel
import cats.effect.Async
import telegramium.bots.high.{Api, LongPollBot}
import telegramium.bots.high.implicits._
import cats.syntax.flatMap._
import cats.syntax.functor._
import telegramium.bots._
import scala.util.Random

class TelegramiumBot[F[_]]()(implicit
  bot: Api[F],
  asyncF: Async[F],
  parallel: Parallel[F]
) extends LongPollBot[F](bot) {

  private def formatShortMonster(m: MonsterDetails): String = {
    s"""
       |  üî• ${m.name.toUpperCase} üî•
       |  üõ°Ô∏è –ë—Ä–æ–Ω—è: ${m.armor_class.headOption.map(_.value).getOrElse("–ü–æ–≤–µ–∑–ª–æ)")}
       |  ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${m.hit_points}
       |  ‚öîÔ∏è –£—Ä–æ–≤–µ–Ω—å –£–≥—Ä–æ–∑—ã: ${m.challenge_rating}
       |""".stripMargin.trim
  }

  private def formatExtendedMonster(m: MonsterExtended): String = {
    s"""
       | üî• ${m.name.toUpperCase} üî•
       | ---------------------------------
       | üõ°Ô∏è –ë—Ä–æ–Ω—è: ${m.armor_class.headOption.map(_.value).getOrElse("–ü–æ–≤–µ–∑–ª–æ)")}
       | ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${m.hit_points}
       | ‚öîÔ∏è –£—Ä–æ–≤–µ–Ω—å –£–≥—Ä–æ–∑—ã: ${m.challenge_rating}
       | ---------------------------------
       | üìè –†–∞–∑–º–µ—Ä: ${m.size}
       | üêæ –¢–∏–ø: ${m.`type`}
       | üé≠ –ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ: ${m.alignment}
       | ---------------------------------
       | üö∂ –°–∫–æ—Ä–æ—Å—Ç—å:
       | ${if (m.speed.isEmpty) "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
      else m.speed.map { case (mode, value) => s"$mode: $value" }.mkString("\n ")}
       |---------------------------------
       | üí™ –°–∏–ª–∞: ${m.strength}
       | ü§∏ –õ–æ–≤–∫–æ—Å—Ç—å: ${m.dexterity}
       | üõ°Ô∏è –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: ${m.constitution}
       | üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: ${m.intelligence}
       | üëÅÔ∏è –ú—É–¥—Ä–æ—Å—Ç—å: ${m.wisdom}
       | üíñ –•–∞—Ä–∏–∑–º–∞: ${m.charisma}
       | ---------------------------------
       | üèÜ –û–ø—ã—Ç: ${m.xp}
       | üó£Ô∏è –Ø–∑—ã–∫–∏: ${if (m.languages.isEmpty) "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" else m.languages}
       | ---------------------------------
       | ‚ú® –û—Å–æ–±—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
       | ${if (m.special_abilities.isEmpty) "=)"
      else m.special_abilities.map(a => s"   - ${a.name}: ${a.desc}").mkString("\n")}
       |""".stripMargin.trim
  }

  override def onMessage(msg: Message): F[Unit] = {
    msg.text.getOrElse(asyncF.unit) match {
      case "/monsters" =>
        sendMessage(
          chatId = ChatIntId(msg.chat.id),
          text = s"""
              |–ù—É... –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤–æ –ø–æ–¥ –≤–∞—à—É —Ö–æ—Ç–µ–ª–∫—É. ‚úÖ
              |–ü—Ä–æ—à—É –≤–∞—Å, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å...
              |""".stripMargin,
          replyMarkup = Some(
            InlineKeyboardMarkup(
              inlineKeyboard = List(
                List(
                  InlineKeyboardButton("–õ—ë–≥–∫–∏–π –ø—É—Ç—å", callbackData = Some("easy")),
                  InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callbackData = Some("medium"))
                ),
                List(
                  InlineKeyboardButton("–¢—è–∂–µ–ª–æ-—Ç—è–∂–µ–ª–æ...", callbackData = Some("hard")),
                  InlineKeyboardButton(s"üíÄ", callbackData = Some("death"))
                )
              )
            )
          )
        ).exec.void

      case "/generatemonsters" =>
        for {
          monsters <- fetchMonsters[F]
          randomMonsters = Random.shuffle(monsters).take(3)
          monstersDetailed <- getMonstersDetails(randomMonsters.map(_.index))
          monstersText = monstersDetailed.map(formatShortMonster).mkString("\n\n")
          textFinal = s"üåü –í–æ—Ç 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–∞ üåü\n\n$monstersText"

          - <- sendMessage(
            chatId = ChatIntId(msg.chat.id),
            text = textFinal
          ).exec.void
        } yield ()

      case "/tags" =>
        for {
          monsters <- fetchMonsters[F]
          monstersRandomIndexes = Random.shuffle(monsters).take(50).map(m => s"üåü${m.index}üåü").mkString("\n")

          textFinal = s"üõ°Ô∏è–í–æ—Ç –∏–Ω–¥–µ–∫—Å—ã —Å–ª—É—á–∞–π–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤üõ°Ô∏è \n\n$monstersRandomIndexes" +
            s"\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É ü•≥"
          _ <- sendMessage(chatId = ChatIntId(msg.chat.id), text = textFinal).exec.void
        } yield ()

      case text: String if text.startsWith("/find") =>
        val monsterIndex = text.substring(5).trim
        if (monsterIndex.isEmpty) {
          sendMessage(
            chatId = ChatIntId(msg.chat.id),
            text = """–ó–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å —Ç—ç–≥, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å.
                     |–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π '/tags', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—ç–≥–æ–≤.
                     |""".stripMargin
          ).exec.void
        } else {
          for {
            monsterInfo <- getMonsterInfo[F](monsterIndex)
            descriptionText = monsterInfo match {
              case Some(m) => formatExtendedMonster(m)
              case None    => """–¢–∞–∫–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –Ω–µ—Ç! –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ–Ω –ø—Ä—è—á–µ—Ç—Å—è –æ—Ç –≤–∞—Å..."""
            }
            _ <- sendMessage(
              chatId = ChatIntId(msg.chat.id),
              text = s"""üîÆ –°–µ–≥–æ–¥–Ω—è –≤—ã –ø–æ–±–ª–∏–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å —Å ...üîÆ
                   |
                   |$descriptionText""".stripMargin
            ).exec.void
          } yield ()
        }

      case "/monster" =>
        for {
          monsters <- fetchMonsters[F]
          randomMonsters = Random.shuffle(monsters).take(1)
          monsterExtendedInfo <- getMonsterFullData(randomMonsters.map(_.index))
          monsterText = monsterExtendedInfo.map(formatExtendedMonster).mkString("\n\n")
          textFinal = s"""üîÆ –°–µ–≥–æ–¥–Ω—è –≤—ã –ø–æ–±–ª–∏–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ—Å—å —Å ...üîÆ
                   |
                   |$monsterText""".stripMargin
          _ <- sendMessage(chatId = ChatIntId(msg.chat.id), text = textFinal).exec.void
        } yield ()

      case _ =>
        sendMessage(
          chatId = ChatIntId(msg.chat.id),
          text = """
            | –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∂–¥—É—Ç! –ö–µ–º —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ–º —É–±–∏–≤–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤?
            |
            | üêâ /generatemonsters - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Ä–∞–∑—É 3–µ—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤.üêâ
            | üíß /monsters - –û—Ç–∫—Ä–æ–µ—Ç –≤–∞–º —Å–Ω–æ–≤–∞ –¥–∏–Ω–∞–º–∏—á–Ω–æ–µ –º–µ–Ω—é –º–æ–Ω—Å—Ç—Ä–∏–∫–æ–≤.üíß
            | üìñ/monster - –í—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞. –° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∞.üìñ
            | üîí/tags - –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—ç–≥–æ–≤ –º–æ–Ω—Å—Ç—Ä–æ–≤. –ü–æ –Ω–∏–º –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –º–æ–Ω—Å—Ç—Ä–∞.üîí
            | üó∫Ô∏è/find [tag] - –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Å—Ç—Ä–µ –ø–æ —Ç–µ–≥—É.üó∫Ô∏è
            |""".stripMargin,
          replyMarkup = Some(
            InlineKeyboardMarkup(
              inlineKeyboard = List(
                List(
                  InlineKeyboardButton(EmojiDice.toString(), callbackData = Some("dice"))
                )
              )
            )
          )
        ).exec.void
    }
  }

  override def onCallbackQuery(query: CallbackQuery): F[Unit] = {
    def onMsg(message: Option[MaybeInaccessibleMessage])(f: Message => F[Unit]): F[Unit] =
      message.collect { case m: Message => m }.fold(asyncF.unit)(f)

    def rollTheDice(chatId: Long): F[Unit] = {
      sendMessage(ChatIntId(chatId), text = "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞:" + (Random.nextInt(20) + 1).toString).exec.void >>
        answerCallbackQuery(callbackQueryId = query.id).exec.void
    }

    def mainMenu(chatId: Long): F[Unit] = {
      sendMessage(
        ChatIntId(chatId),
        text = """
            |–ù—É... –¥–æ–ø—É—Å—Ç–∏–º ü•≥
            |–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ:
            | üêâ /generatemonsters
            | üíß /monsters
            | üìñ /monster
            | üîí /tags
            | üó∫Ô∏è /find [tag]
            |""".stripMargin.trim
      ).exec.void >>
        answerCallbackQuery(callbackQueryId = query.id).exec.void
    }

    def rollMonster(chatId: Long, threat: String): F[Unit] = {
      val (minCr, maxCr) = threat.toLowerCase match {
        case "easy"   => (0.0, 5.0)
        case "medium" => (5.0, 10.0)
        case "hard"   => (10.0, 15.0)
        case "death"  => (15.0, 30.0)
        case _        => (0.0, 20.0)
      }
      for {
        monsters <- fetchMonsters[F]
        filteredMonsters = Random.shuffle(monsters).take(50)
        monsterDetails <- getMonstersDetails(filteredMonsters.map(_.index))

        matchingMonster = monsterDetails.find { m =>
          val cr = m.challenge_rating
          cr >= minCr && cr <= maxCr
        }
        _ <- matchingMonster match {
          case Some(monster) =>
            sendMessage(
              ChatIntId(chatId),
              text = s"""
                                                     |   –ù–æ–≤—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏–±—ã–ª, –∏ —ç—Ç–æ
                                                     |
                                                     |${formatShortMonster(monster)}
                                                     |""".stripMargin.trim,
              replyMarkup = Some(
                InlineKeyboardMarkup(
                  inlineKeyboard = List(
                    List(
                      InlineKeyboardButton("–ü—Ñ—Ñ—Ñ, –ø–ª—ë–≤–æ–µ –¥–µ–ª–æ...", callbackData = Some("menu"))
                    )
                  )
                )
              )
            ).exec.void >>
              answerCallbackQuery(callbackQueryId = query.id).exec.void
          case None =>
            sendMessage(
              ChatIntId(chatId),
              text = "–£–±–µ–∂–∞–ª –≤–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫..."
            ).exec.void >>
              answerCallbackQuery(callbackQueryId = query.id).exec.void
        }
      } yield ()
    }

    query.data
      .map {
        case "dice"   => onMsg(query.message)(m => rollTheDice(m.chat.id))
        case "info"   => onMsg(query.message)(m => rollTheDice(m.chat.id))
        case "easy"   => onMsg(query.message)(m => rollMonster(m.chat.id, "easy"))
        case "medium" => onMsg(query.message)(m => rollMonster(m.chat.id, "medium"))
        case "hard"   => onMsg(query.message)(m => rollMonster(m.chat.id, "hard"))
        case "death"  => onMsg(query.message)(m => rollMonster(m.chat.id, "death"))
        case "menu"   => onMsg(query.message)(m => mainMenu(m.chat.id))
        case x =>
          answerCallbackQuery(
            callbackQueryId = query.id,
            text = Some(s"–í–∞—à –≤—ã–±–æ—Ä $x")
          ).exec.void
      }
      .getOrElse(asyncF.unit)
  }

  override def onInlineQuery(query: InlineQuery): F[Unit] = {
    answerInlineQuery(
      inlineQueryId = query.id,
      results = query.query
        .split(" ")
        .zipWithIndex
        .map { case (word, idx) =>
          InlineQueryResultArticle(
            id = idx.toString,
            title = word,
            inputMessageContent = InputTextMessageContent(messageText = word)
          )
        }
        .toList
    ).exec.void
  }

  override def onChosenInlineResult(inlineResult: ChosenInlineResult): F[Unit] = {
    import io.circe.syntax._
    import telegramium.bots.CirceImplicits._

    asyncF.delay {
      println(inlineResult.asJson.spaces4)
    }
  }

}
